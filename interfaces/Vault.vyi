# @version 0.4.1

struct VaultDataOnDeposit:
    hasPosition: bool
    numAssets: uint256
    userBalance: uint256
    totalBalance: uint256

@external
def depositTokensInVault(
    _user: address,
    _asset: address,
    _amount: uint256,
) -> uint256:
    ...


@external
def withdrawTokensFromVault(
    _user: address,
    _asset: address,
    _amount: uint256,
    _recipient: address,
) -> (uint256, bool):
    ...


@external
def transferBalanceWithinVault(
    _asset: address,
    _fromUser: address,
    _toUser: address,
    _transferAmount: uint256,
) -> (uint256, bool):
    ...


@view
@external
def getUserLootBoxShare(_user: address, _asset: address) -> uint256:
    ...

@view
@external
def getTotalAmountForUser(_user: address, _asset: address) -> uint256:
    ...


@view
@external
def getTotalAmountForVault(_asset: address) -> uint256:
    ...


@view
@external
def isUserInVault(_user: address) -> bool:
    ...


@view
@external
def hasAnyFunds() -> bool:
    ...


@view
@external
def userAssets(_user: address, _index: uint256) -> address:
    ...


@view
@external
def numUserAssets(_user: address) -> uint256:
    ...


@view
@external
def getUserAssetAndAmountAtIndex(_user: address, _index: uint256) -> (address, uint256):
    ...


@view
@external
def getVaultDataOnDeposit(_user: address, _asset: address) -> VaultDataOnDeposit:
    ...


@external
def deregisterUserAsset(_user: address, _asset: address):
    ...


@external
def deregisterVaultAsset(_asset: address):
    ...


@external
def recoverFunds(_asset: address, _recipient: address) -> bool:
    ...


@view
@external
def vaultId() -> uint256:
    ...


@external
def setVaultId(_vaultId: uint256) -> bool:
    ...


@view
@external
def isActivated() -> bool:
    ...


@external
def activate(_shouldActivate: bool):
    ...